/*
 * Commerce Platform API
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.payone.commerce.platform.models;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Object containing the redirect payment product details. 
 */
@JsonPropertyOrder({
  RedirectPaymentMethodSpecificOutput.JSON_PROPERTY_PAYMENT_PRODUCT_ID,
  RedirectPaymentMethodSpecificOutput.JSON_PROPERTY_PAYMENT_PRODUCT840_SPECIFIC_OUTPUT,
  RedirectPaymentMethodSpecificOutput.JSON_PROPERTY_PAYMENT_PROCESSING_TOKEN,
  RedirectPaymentMethodSpecificOutput.JSON_PROPERTY_REPORTING_TOKEN
})
public class RedirectPaymentMethodSpecificOutput implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_PAYMENT_PRODUCT_ID = "paymentProductId";
  private Integer paymentProductId;

  public static final String JSON_PROPERTY_PAYMENT_PRODUCT840_SPECIFIC_OUTPUT = "paymentProduct840SpecificOutput";
  private PaymentProduct840SpecificOutput paymentProduct840SpecificOutput;

  public static final String JSON_PROPERTY_PAYMENT_PROCESSING_TOKEN = "paymentProcessingToken";
  private String paymentProcessingToken;

  public static final String JSON_PROPERTY_REPORTING_TOKEN = "reportingToken";
  private String reportingToken;

  public RedirectPaymentMethodSpecificOutput() {
  }

  public RedirectPaymentMethodSpecificOutput paymentProductId(Integer paymentProductId) {
    
    this.paymentProductId = paymentProductId;
    return this;
  }

   /**
   * &lt;- Payment product identifier - please check product documentation for a full overview of possible values.
   * minimum: 0
   * maximum: 99999
   * @return paymentProductId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPaymentProductId() {
    return paymentProductId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentProductId(Integer paymentProductId) {
    this.paymentProductId = paymentProductId;
  }


  public RedirectPaymentMethodSpecificOutput paymentProduct840SpecificOutput(PaymentProduct840SpecificOutput paymentProduct840SpecificOutput) {
    
    this.paymentProduct840SpecificOutput = paymentProduct840SpecificOutput;
    return this;
  }

   /**
   * Get paymentProduct840SpecificOutput
   * @return paymentProduct840SpecificOutput
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_PRODUCT840_SPECIFIC_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentProduct840SpecificOutput getPaymentProduct840SpecificOutput() {
    return paymentProduct840SpecificOutput;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_PRODUCT840_SPECIFIC_OUTPUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentProduct840SpecificOutput(PaymentProduct840SpecificOutput paymentProduct840SpecificOutput) {
    this.paymentProduct840SpecificOutput = paymentProduct840SpecificOutput;
  }


  public RedirectPaymentMethodSpecificOutput paymentProcessingToken(String paymentProcessingToken) {
    
    this.paymentProcessingToken = paymentProcessingToken;
    return this;
  }

   /**
   * ID of the token. This property is populated when the payment was done with a token.
   * @return paymentProcessingToken
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_PROCESSING_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentProcessingToken() {
    return paymentProcessingToken;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_PROCESSING_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentProcessingToken(String paymentProcessingToken) {
    this.paymentProcessingToken = paymentProcessingToken;
  }


  public RedirectPaymentMethodSpecificOutput reportingToken(String reportingToken) {
    
    this.reportingToken = reportingToken;
    return this;
  }

   /**
   * Token to identify the card in the reporting.
   * @return reportingToken
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORTING_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReportingToken() {
    return reportingToken;
  }


  @JsonProperty(JSON_PROPERTY_REPORTING_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportingToken(String reportingToken) {
    this.reportingToken = reportingToken;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedirectPaymentMethodSpecificOutput redirectPaymentMethodSpecificOutput = (RedirectPaymentMethodSpecificOutput) o;
    return Objects.equals(this.paymentProductId, redirectPaymentMethodSpecificOutput.paymentProductId) &&
        Objects.equals(this.paymentProduct840SpecificOutput, redirectPaymentMethodSpecificOutput.paymentProduct840SpecificOutput) &&
        Objects.equals(this.paymentProcessingToken, redirectPaymentMethodSpecificOutput.paymentProcessingToken) &&
        Objects.equals(this.reportingToken, redirectPaymentMethodSpecificOutput.reportingToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentProductId, paymentProduct840SpecificOutput, paymentProcessingToken, reportingToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedirectPaymentMethodSpecificOutput {\n");
    sb.append("    paymentProductId: ").append(toIndentedString(paymentProductId)).append("\n");
    sb.append("    paymentProduct840SpecificOutput: ").append(toIndentedString(paymentProduct840SpecificOutput)).append("\n");
    sb.append("    paymentProcessingToken: ").append(toIndentedString(paymentProcessingToken)).append("\n");
    sb.append("    reportingToken: ").append(toIndentedString(reportingToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `paymentProductId` to the URL query string
    if (getPaymentProductId() != null) {
      try {
        joiner.add(String.format("%spaymentProductId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentProductId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `paymentProduct840SpecificOutput` to the URL query string
    if (getPaymentProduct840SpecificOutput() != null) {
      joiner.add(getPaymentProduct840SpecificOutput().toUrlQueryString(prefix + "paymentProduct840SpecificOutput" + suffix));
    }

    // add `paymentProcessingToken` to the URL query string
    if (getPaymentProcessingToken() != null) {
      try {
        joiner.add(String.format("%spaymentProcessingToken%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaymentProcessingToken()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `reportingToken` to the URL query string
    if (getReportingToken() != null) {
      try {
        joiner.add(String.format("%sreportingToken%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReportingToken()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

