/*
 * Commerce Platform API
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import java.time.OffsetDateTime;
import java.util.UUID;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import client.ApiClient;
import client.ApiException;
import client.Configuration;
import client.Pair;
import client.models.CheckoutResponse;
import client.models.CheckoutsResponse;
import client.models.CreateCheckoutRequest;
import client.models.CreateCheckoutResponse;
import client.models.ExtendedCheckoutStatus;
import client.models.PatchCheckoutRequest;
import client.models.PaymentChannel;
import client.models.StatusCheckout;

public class CheckoutApi {


  private ApiClient apiClient;

  public CheckoutApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CheckoutApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Add a Checkout to an existing Commerce Case
   * This endpoint can be used to add a new Checkout in combination with an Order to an existing Commerce Case. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckout Action or Payment Execution endpoint.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param createCheckoutRequest  (required)
   * @return CreateCheckoutResponse
   * @throws ApiException if fails to make API call
   */
  public CreateCheckoutResponse createCheckout(String merchantId, UUID commerceCaseId, CreateCheckoutRequest createCheckoutRequest) throws ApiException {
    return this.createCheckout(merchantId, commerceCaseId, createCheckoutRequest, Collections.emptyMap());
  }


  /**
   * Add a Checkout to an existing Commerce Case
   * This endpoint can be used to add a new Checkout in combination with an Order to an existing Commerce Case. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckout Action or Payment Execution endpoint.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param createCheckoutRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateCheckoutResponse
   * @throws ApiException if fails to make API call
   */
  public CreateCheckoutResponse createCheckout(String merchantId, UUID commerceCaseId, CreateCheckoutRequest createCheckoutRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createCheckoutRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling createCheckout");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling createCheckout");
    }
    
    // verify the required parameter 'createCheckoutRequest' is set
    if (createCheckoutRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createCheckoutRequest' when calling createCheckout");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CreateCheckoutResponse> localVarReturnType = new TypeReference<CreateCheckoutResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a Checkout
   * This endpoint can be used to delete an unused Checkout.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteCheckout(String merchantId, UUID commerceCaseId, UUID checkoutId) throws ApiException {
    this.deleteCheckout(merchantId, commerceCaseId, checkoutId, Collections.emptyMap());
  }


  /**
   * Delete a Checkout
   * This endpoint can be used to delete an unused Checkout.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteCheckout(String merchantId, UUID commerceCaseId, UUID checkoutId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling deleteCheckout");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling deleteCheckout");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling deleteCheckout");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get Checkout Details
   * This endpoint can be used to get a Checkout.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @return CheckoutResponse
   * @throws ApiException if fails to make API call
   */
  public CheckoutResponse getCheckout(String merchantId, UUID commerceCaseId, UUID checkoutId) throws ApiException {
    return this.getCheckout(merchantId, commerceCaseId, checkoutId, Collections.emptyMap());
  }


  /**
   * Get Checkout Details
   * This endpoint can be used to get a Checkout.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CheckoutResponse
   * @throws ApiException if fails to make API call
   */
  public CheckoutResponse getCheckout(String merchantId, UUID commerceCaseId, UUID checkoutId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling getCheckout");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling getCheckout");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling getCheckout");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CheckoutResponse> localVarReturnType = new TypeReference<CheckoutResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a list of Checkouts based on Search Parameters
   * This endpoint will provide a list of Checkouts based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. Only up to the first 10,000 results will be returned. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param offset The offset to load Checkouts starting with 0 (optional, default to 0)
   * @param size The number of Checkouts loaded per page (optional, default to 25)
   * @param fromDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system.  (optional)
   * @param toDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system.  (optional)
   * @param fromCheckoutAmount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toCheckoutAmount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromOpenAmount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toOpenAmount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromCollectedAmount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toCollectedAmount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromCancelledAmount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toCancelledAmount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromRefundAmount Minimum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toRefundAmount Maximum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromChargebackAmount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toChargebackAmount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param checkoutId Unique identifier of a Checkout (optional)
   * @param merchantReference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes. (optional)
   * @param merchantCustomerId Unique identifier for the customer. (optional)
   * @param includePaymentProductId Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned. (optional)
   * @param includeCheckoutStatus Filter your results by Checkout status so that only Checkouts with the specified statuses are returned. (optional)
   * @param includeExtendedCheckoutStatus Filter your results by extended Checkout status so that only Commerce Cases with Checkouts with the specified statuses are returned. (optional)
   * @param includePaymentChannel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned. (optional)
   * @param paymentReference Filter your results by the merchantReference of the paymentExecution or paymentInformation. (optional)
   * @param paymentId Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment. (optional)
   * @param firstName Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address. (optional)
   * @param surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address. (optional)
   * @param email Filter your results by the customer email address. (optional)
   * @param phoneNumber Filter your results by the customer phone number. (optional)
   * @param dateOfBirth Filter your results by the date of birth. Format YYYYMMDD (optional)
   * @param companyInformation Filter your results by the name of the company. (optional)
   * @return CheckoutsResponse
   * @throws ApiException if fails to make API call
   */
  public CheckoutsResponse getCheckouts(String merchantId, Integer offset, Integer size, OffsetDateTime fromDate, OffsetDateTime toDate, Long fromCheckoutAmount, Long toCheckoutAmount, Long fromOpenAmount, Long toOpenAmount, Long fromCollectedAmount, Long toCollectedAmount, Long fromCancelledAmount, Long toCancelledAmount, Long fromRefundAmount, Long toRefundAmount, Long fromChargebackAmount, Long toChargebackAmount, UUID checkoutId, String merchantReference, String merchantCustomerId, List<Integer> includePaymentProductId, List<StatusCheckout> includeCheckoutStatus, List<ExtendedCheckoutStatus> includeExtendedCheckoutStatus, List<PaymentChannel> includePaymentChannel, String paymentReference, String paymentId, String firstName, String surname, String email, String phoneNumber, String dateOfBirth, String companyInformation) throws ApiException {
    return this.getCheckouts(merchantId, offset, size, fromDate, toDate, fromCheckoutAmount, toCheckoutAmount, fromOpenAmount, toOpenAmount, fromCollectedAmount, toCollectedAmount, fromCancelledAmount, toCancelledAmount, fromRefundAmount, toRefundAmount, fromChargebackAmount, toChargebackAmount, checkoutId, merchantReference, merchantCustomerId, includePaymentProductId, includeCheckoutStatus, includeExtendedCheckoutStatus, includePaymentChannel, paymentReference, paymentId, firstName, surname, email, phoneNumber, dateOfBirth, companyInformation, Collections.emptyMap());
  }


  /**
   * Get a list of Checkouts based on Search Parameters
   * This endpoint will provide a list of Checkouts based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. Only up to the first 10,000 results will be returned. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param offset The offset to load Checkouts starting with 0 (optional, default to 0)
   * @param size The number of Checkouts loaded per page (optional, default to 25)
   * @param fromDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX          All other formats may be ignored by the system.  (optional)
   * @param toDate Date and time in RFC3339 format after which Checkouts should be included in the request. Accepted formats are: * YYYY-MM-DD&#39;T&#39;HH:mm:ss&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm:ss+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm:ss-XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm&#39;Z&#39; * YYYY-MM-DD&#39;T&#39;HH:mm+XX:XX * YYYY-MM-DD&#39;T&#39;HH:mm-XX:XX All other formats may be ignored by the system.  (optional)
   * @param fromCheckoutAmount Minimum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toCheckoutAmount Maximum monetary value of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromOpenAmount Minimum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toOpenAmount Maximum open amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromCollectedAmount Minimum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toCollectedAmount Maximum collected amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromCancelledAmount Minimum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toCancelledAmount Maximum cancelled amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromRefundAmount Minimum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toRefundAmount Maximum refund amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param fromChargebackAmount Minimum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param toChargebackAmount Maximum chargeback amount of the Checkouts that shall be included in the response. Amount in cents always having 2 decimals. (optional)
   * @param checkoutId Unique identifier of a Checkout (optional)
   * @param merchantReference Unique reference of the Checkout that is also returned for reporting and reconciliation purposes. (optional)
   * @param merchantCustomerId Unique identifier for the customer. (optional)
   * @param includePaymentProductId Filter your results by payment product ID so that only Checkouts containing a Payment Execution with one of the specified payment product IDs are returned. (optional)
   * @param includeCheckoutStatus Filter your results by Checkout status so that only Checkouts with the specified statuses are returned. (optional)
   * @param includeExtendedCheckoutStatus Filter your results by extended Checkout status so that only Commerce Cases with Checkouts with the specified statuses are returned. (optional)
   * @param includePaymentChannel Filter your results by payment channel so that only Checkouts which reference transactions on the given channels are returned. (optional)
   * @param paymentReference Filter your results by the merchantReference of the paymentExecution or paymentInformation. (optional)
   * @param paymentId Filter your results by the paymentExecutionId, paymentInformationId or the id of the payment. (optional)
   * @param firstName Filter your results by the customer first name. It is also possible to filter by the first name from the shipping address. (optional)
   * @param surname Filter your results by the customer surname. It is also possible to filter by the surname from the shipping address. (optional)
   * @param email Filter your results by the customer email address. (optional)
   * @param phoneNumber Filter your results by the customer phone number. (optional)
   * @param dateOfBirth Filter your results by the date of birth. Format YYYYMMDD (optional)
   * @param companyInformation Filter your results by the name of the company. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return CheckoutsResponse
   * @throws ApiException if fails to make API call
   */
  public CheckoutsResponse getCheckouts(String merchantId, Integer offset, Integer size, OffsetDateTime fromDate, OffsetDateTime toDate, Long fromCheckoutAmount, Long toCheckoutAmount, Long fromOpenAmount, Long toOpenAmount, Long fromCollectedAmount, Long toCollectedAmount, Long fromCancelledAmount, Long toCancelledAmount, Long fromRefundAmount, Long toRefundAmount, Long fromChargebackAmount, Long toChargebackAmount, UUID checkoutId, String merchantReference, String merchantCustomerId, List<Integer> includePaymentProductId, List<StatusCheckout> includeCheckoutStatus, List<ExtendedCheckoutStatus> includeExtendedCheckoutStatus, List<PaymentChannel> includePaymentChannel, String paymentReference, String paymentId, String firstName, String surname, String email, String phoneNumber, String dateOfBirth, String companyInformation, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling getCheckouts");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/checkouts"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromCheckoutAmount", fromCheckoutAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("toCheckoutAmount", toCheckoutAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromOpenAmount", fromOpenAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("toOpenAmount", toOpenAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromCollectedAmount", fromCollectedAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("toCollectedAmount", toCollectedAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromCancelledAmount", fromCancelledAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("toCancelledAmount", toCancelledAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromRefundAmount", fromRefundAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("toRefundAmount", toRefundAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromChargebackAmount", fromChargebackAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("toChargebackAmount", toChargebackAmount));
    localVarQueryParams.addAll(apiClient.parameterToPair("checkoutId", checkoutId));
    localVarQueryParams.addAll(apiClient.parameterToPair("merchantReference", merchantReference));
    localVarQueryParams.addAll(apiClient.parameterToPair("merchantCustomerId", merchantCustomerId));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "includePaymentProductId", includePaymentProductId));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "includeCheckoutStatus", includeCheckoutStatus));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "includeExtendedCheckoutStatus", includeExtendedCheckoutStatus));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "includePaymentChannel", includePaymentChannel));
    localVarQueryParams.addAll(apiClient.parameterToPair("paymentReference", paymentReference));
    localVarQueryParams.addAll(apiClient.parameterToPair("paymentId", paymentId));
    localVarQueryParams.addAll(apiClient.parameterToPair("firstName", firstName));
    localVarQueryParams.addAll(apiClient.parameterToPair("surname", surname));
    localVarQueryParams.addAll(apiClient.parameterToPair("email", email));
    localVarQueryParams.addAll(apiClient.parameterToPair("phoneNumber", phoneNumber));
    localVarQueryParams.addAll(apiClient.parameterToPair("dateOfBirth", dateOfBirth));
    localVarQueryParams.addAll(apiClient.parameterToPair("companyInformation", companyInformation));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CheckoutsResponse> localVarReturnType = new TypeReference<CheckoutsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Modify a Checkout
   * This endpoint can be used to update or modify the data of a Checkout.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param patchCheckoutRequest  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateCheckout(String merchantId, UUID commerceCaseId, UUID checkoutId, PatchCheckoutRequest patchCheckoutRequest) throws ApiException {
    this.updateCheckout(merchantId, commerceCaseId, checkoutId, patchCheckoutRequest, Collections.emptyMap());
  }


  /**
   * Modify a Checkout
   * This endpoint can be used to update or modify the data of a Checkout.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param patchCheckoutRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateCheckout(String merchantId, UUID commerceCaseId, UUID checkoutId, PatchCheckoutRequest patchCheckoutRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = patchCheckoutRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling updateCheckout");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling updateCheckout");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling updateCheckout");
    }
    
    // verify the required parameter 'patchCheckoutRequest' is set
    if (patchCheckoutRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchCheckoutRequest' when calling updateCheckout");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

}
