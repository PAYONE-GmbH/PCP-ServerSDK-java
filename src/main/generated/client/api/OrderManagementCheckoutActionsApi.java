/*
 * Commerce Platform API
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import java.util.UUID;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import client.ApiClient;
import client.ApiException;
import client.Configuration;
import client.Pair;
import client.models.CancelRequest;
import client.models.CancelResponse;
import client.models.CompleteOrderRequest;
import client.models.CompletePaymentResponse;
import client.models.DeliverRequest;
import client.models.DeliverResponse;
import client.models.OrderRequest;
import client.models.OrderResponse;
import client.models.ReturnRequest;
import client.models.ReturnResponse;

public class OrderManagementCheckoutActionsApi {


  private ApiClient apiClient;

  public OrderManagementCheckoutActionsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public OrderManagementCheckoutActionsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Mark items of a Checkout as cancelled and automatically cancel the payment for the items
   * This endpoint can be used to mark items from a Checkout as cancelled and reverse the payment associated with this Checkout. The Cancel endpoint can be used to cancel a full or partial order.  The Cancel request will mark all or (for cancelType PARTIAL) the provided items as CANCELLED, and – in case of an existing authorization – will reverse the payment.  In the light of card payments, reversing an authorization that is not needed will prevent you from having to pay a fee/penalty for unused authorization requests. Whilst scheme regulations require that acquirers and PSPs support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore, there is no guarantee the authorization hold is released. The authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392). For other payment methods the cancellationReason is not mandatory but can be used for reporting and reconciliation purposes.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param cancelRequest  (optional)
   * @return CancelResponse
   * @throws ApiException if fails to make API call
   */
  public CancelResponse cancelOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, CancelRequest cancelRequest) throws ApiException {
    return this.cancelOrder(merchantId, commerceCaseId, checkoutId, cancelRequest, Collections.emptyMap());
  }


  /**
   * Mark items of a Checkout as cancelled and automatically cancel the payment for the items
   * This endpoint can be used to mark items from a Checkout as cancelled and reverse the payment associated with this Checkout. The Cancel endpoint can be used to cancel a full or partial order.  The Cancel request will mark all or (for cancelType PARTIAL) the provided items as CANCELLED, and – in case of an existing authorization – will reverse the payment.  In the light of card payments, reversing an authorization that is not needed will prevent you from having to pay a fee/penalty for unused authorization requests. Whilst scheme regulations require that acquirers and PSPs support authorization reversals, there are no rules towards issuers mandating them to process the reversal advice. Therefore, there is no guarantee the authorization hold is released. The authorization reversal can only be performed by the card issuer, and under no circumstances will we be responsible for performing the authorization reversal.  The cancellationReason is mandatory for BNPL payment methods (paymentProductId 3390, 3391 and 3392). For other payment methods the cancellationReason is not mandatory but can be used for reporting and reconciliation purposes.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param cancelRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return CancelResponse
   * @throws ApiException if fails to make API call
   */
  public CancelResponse cancelOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, CancelRequest cancelRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = cancelRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling cancelOrder");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling cancelOrder");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling cancelOrder");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/cancel"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CancelResponse> localVarReturnType = new TypeReference<CancelResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Complete an Order
   * For PAYONE Secured Installments (paymentProductId3391) a two-step process is required. The first step is creating an Order, the second step is completing it by calling this API endpoint.
   * @param merchantId The merchantId identifies uniquely the merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param completeOrderRequest  (required)
   * @return CompletePaymentResponse
   * @throws ApiException if fails to make API call
   */
  public CompletePaymentResponse completeOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, CompleteOrderRequest completeOrderRequest) throws ApiException {
    return this.completeOrder(merchantId, commerceCaseId, checkoutId, completeOrderRequest, Collections.emptyMap());
  }


  /**
   * Complete an Order
   * For PAYONE Secured Installments (paymentProductId3391) a two-step process is required. The first step is creating an Order, the second step is completing it by calling this API endpoint.
   * @param merchantId The merchantId identifies uniquely the merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param completeOrderRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CompletePaymentResponse
   * @throws ApiException if fails to make API call
   */
  public CompletePaymentResponse completeOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, CompleteOrderRequest completeOrderRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = completeOrderRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling completeOrder");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling completeOrder");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling completeOrder");
    }
    
    // verify the required parameter 'completeOrderRequest' is set
    if (completeOrderRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'completeOrderRequest' when calling completeOrder");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/complete-order"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CompletePaymentResponse> localVarReturnType = new TypeReference<CompletePaymentResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Creates an Order that will automatially execute a Payment
   * This endpoint can be used to create an Order that automatically executes a payment for the respective Checkout.  The Order request requires items within the ShoppingCart and can be made for a partial or the entire ShoppingCart of a Checkout. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param orderRequest  (required)
   * @return OrderResponse
   * @throws ApiException if fails to make API call
   */
  public OrderResponse createOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, OrderRequest orderRequest) throws ApiException {
    return this.createOrder(merchantId, commerceCaseId, checkoutId, orderRequest, Collections.emptyMap());
  }


  /**
   * Creates an Order that will automatially execute a Payment
   * This endpoint can be used to create an Order that automatically executes a payment for the respective Checkout.  The Order request requires items within the ShoppingCart and can be made for a partial or the entire ShoppingCart of a Checkout. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param orderRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return OrderResponse
   * @throws ApiException if fails to make API call
   */
  public OrderResponse createOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, OrderRequest orderRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = orderRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling createOrder");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling createOrder");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling createOrder");
    }
    
    // verify the required parameter 'orderRequest' is set
    if (orderRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'orderRequest' when calling createOrder");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/order"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<OrderResponse> localVarReturnType = new TypeReference<OrderResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Mark items of a Checkout as delivered and automatically capture the payment for the items
   * This endpoint can be used to mark items from a Checkout as delivered and to automatically capture the payments for those items. The return can only be done for Checkouts with status COMPLETED, BILLED or CHARGEDBACKED and the items have to be in the status ORDERED. If the payment has already been captured (in case of a SALE), the deliver request will only update the item status. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param deliverRequest  (required)
   * @return DeliverResponse
   * @throws ApiException if fails to make API call
   */
  public DeliverResponse deliverOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, DeliverRequest deliverRequest) throws ApiException {
    return this.deliverOrder(merchantId, commerceCaseId, checkoutId, deliverRequest, Collections.emptyMap());
  }


  /**
   * Mark items of a Checkout as delivered and automatically capture the payment for the items
   * This endpoint can be used to mark items from a Checkout as delivered and to automatically capture the payments for those items. The return can only be done for Checkouts with status COMPLETED, BILLED or CHARGEDBACKED and the items have to be in the status ORDERED. If the payment has already been captured (in case of a SALE), the deliver request will only update the item status. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param deliverRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DeliverResponse
   * @throws ApiException if fails to make API call
   */
  public DeliverResponse deliverOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, DeliverRequest deliverRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = deliverRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling deliverOrder");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling deliverOrder");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling deliverOrder");
    }
    
    // verify the required parameter 'deliverRequest' is set
    if (deliverRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deliverRequest' when calling deliverOrder");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/deliver"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeliverResponse> localVarReturnType = new TypeReference<DeliverResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Mark items of a Checkout as returned and automatically refund the payment for the items
   * This endpoint can be used to mark items from a Checkout as returned and will automatically refund the payments for those items. The return can only be done for Checkouts with status BILLED or CHARGEDBACKED and the items have to be in the status DELIVERED. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param returnRequest  (optional)
   * @return ReturnResponse
   * @throws ApiException if fails to make API call
   */
  public ReturnResponse returnOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, ReturnRequest returnRequest) throws ApiException {
    return this.returnOrder(merchantId, commerceCaseId, checkoutId, returnRequest, Collections.emptyMap());
  }


  /**
   * Mark items of a Checkout as returned and automatically refund the payment for the items
   * This endpoint can be used to mark items from a Checkout as returned and will automatically refund the payments for those items. The return can only be done for Checkouts with status BILLED or CHARGEDBACKED and the items have to be in the status DELIVERED. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param checkoutId Unique identifier of a Checkout (required)
   * @param returnRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ReturnResponse
   * @throws ApiException if fails to make API call
   */
  public ReturnResponse returnOrder(String merchantId, UUID commerceCaseId, UUID checkoutId, ReturnRequest returnRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = returnRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling returnOrder");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling returnOrder");
    }
    
    // verify the required parameter 'checkoutId' is set
    if (checkoutId == null) {
      throw new ApiException(400, "Missing the required parameter 'checkoutId' when calling returnOrder");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}/checkouts/{checkoutId}/return"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()))
      .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<ReturnResponse> localVarReturnType = new TypeReference<ReturnResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
