/*
 * Commerce Platform API
 * RESTful API for the creation of Commerce Cases with Checkouts and the execution of Payments. 
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import java.time.OffsetDateTime;
import java.util.UUID;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

import client.ApiClient;
import client.ApiException;
import client.Configuration;
import client.Pair;
import client.models.CommerceCaseResponse;
import client.models.CreateCommerceCaseRequest;
import client.models.CreateCommerceCaseResponse;
import client.models.Customer;
import client.models.PaymentChannel;
import client.models.StatusCheckout;

public class CommerceCaseApi {


  private ApiClient apiClient;

  public CommerceCaseApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CommerceCaseApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create a Commerce Case
   * This endpoint can be used to create a Commerce Case in combination with a Checkout and an Order. A Commerce Case is a container for multiple Checkouts and can be directly linked to one customer. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckoutActions or Payment Execution endpoint.
   * @param merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
   * @param createCommerceCaseRequest  (required)
   * @return CreateCommerceCaseResponse
   * @throws ApiException if fails to make API call
   */
  public CreateCommerceCaseResponse createCommerceCase(String merchantId, CreateCommerceCaseRequest createCommerceCaseRequest) throws ApiException {
    return this.createCommerceCase(merchantId, createCommerceCaseRequest, Collections.emptyMap());
  }


  /**
   * Create a Commerce Case
   * This endpoint can be used to create a Commerce Case in combination with a Checkout and an Order. A Commerce Case is a container for multiple Checkouts and can be directly linked to one customer. The Order can either be directly executed or the paymentMethodSpecificInput can also be stored for a later execution over the OrderManagementCheckoutActions or Payment Execution endpoint.
   * @param merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
   * @param createCommerceCaseRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateCommerceCaseResponse
   * @throws ApiException if fails to make API call
   */
  public CreateCommerceCaseResponse createCommerceCase(String merchantId, CreateCommerceCaseRequest createCommerceCaseRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createCommerceCaseRequest;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling createCommerceCase");
    }
    
    // verify the required parameter 'createCommerceCaseRequest' is set
    if (createCommerceCaseRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createCommerceCaseRequest' when calling createCommerceCase");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CreateCommerceCaseResponse> localVarReturnType = new TypeReference<CreateCommerceCaseResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Commerce Case Details
   * This endpoint can be used to get a specific Commerce Case and all linked Checkouts.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @return CommerceCaseResponse
   * @throws ApiException if fails to make API call
   */
  public CommerceCaseResponse getCommerceCase(String merchantId, UUID commerceCaseId) throws ApiException {
    return this.getCommerceCase(merchantId, commerceCaseId, Collections.emptyMap());
  }


  /**
   * Get Commerce Case Details
   * This endpoint can be used to get a specific Commerce Case and all linked Checkouts.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CommerceCaseResponse
   * @throws ApiException if fails to make API call
   */
  public CommerceCaseResponse getCommerceCase(String merchantId, UUID commerceCaseId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling getCommerceCase");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling getCommerceCase");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CommerceCaseResponse> localVarReturnType = new TypeReference<CommerceCaseResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a list of Commerce Cases based on Search Parameters
   * This endpoint will provide a list of Commerce Cases based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
   * @param offset The offset to load Commerce Cases starting with 0. (optional, default to 0)
   * @param size The number of Commerce Cases loaded per page. (optional, default to 25)
   * @param fromDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly.  (optional)
   * @param toDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly.  (optional)
   * @param commerceCaseId Unique identifier of a Commerce Case. (optional)
   * @param merchantReference Unique reference of the Commerce Case that is also returned for reporting and reconciliation purposes. (optional)
   * @param merchantCustomerId Unique identifier for the customer. (optional)
   * @param includeCheckoutStatus Filter your results by the Checkout Status. The response will only return Commerce Cases with Checkouts with the provided Checkout Statuses. (optional)
   * @param includePaymentChannel Filter your results by Payment Channel. The response will only return Commerce Cases with Checkouts for the provided Payment Channel. (optional)
   * @return List&lt;CommerceCaseResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<CommerceCaseResponse> getCommerceCases(String merchantId, Integer offset, Integer size, OffsetDateTime fromDate, OffsetDateTime toDate, UUID commerceCaseId, String merchantReference, String merchantCustomerId, List<StatusCheckout> includeCheckoutStatus, List<PaymentChannel> includePaymentChannel) throws ApiException {
    return this.getCommerceCases(merchantId, offset, size, fromDate, toDate, commerceCaseId, merchantReference, merchantCustomerId, includeCheckoutStatus, includePaymentChannel, Collections.emptyMap());
  }


  /**
   * Get a list of Commerce Cases based on Search Parameters
   * This endpoint will provide a list of Commerce Cases based on the provided criteria. Not all parameters are required to be set. Results will be returned in descending creation time per default. 
   * @param merchantId The merchantId identifies uniquely the merchant. A Commerce Case has exactly one merchant. (required)
   * @param offset The offset to load Commerce Cases starting with 0. (optional, default to 0)
   * @param size The number of Commerce Cases loaded per page. (optional, default to 25)
   * @param fromDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly.  (optional)
   * @param toDate Date and time in ISO 8601 format a Commerce Cases should be included in the request. Excepted formats are:  * YYYY-MM-DDThh:mm:ssZ * YYYY-MM-DDThh:mm:ss+XX:XX All other formats are ignored or may not be handled properly.  (optional)
   * @param commerceCaseId Unique identifier of a Commerce Case. (optional)
   * @param merchantReference Unique reference of the Commerce Case that is also returned for reporting and reconciliation purposes. (optional)
   * @param merchantCustomerId Unique identifier for the customer. (optional)
   * @param includeCheckoutStatus Filter your results by the Checkout Status. The response will only return Commerce Cases with Checkouts with the provided Checkout Statuses. (optional)
   * @param includePaymentChannel Filter your results by Payment Channel. The response will only return Commerce Cases with Checkouts for the provided Payment Channel. (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;CommerceCaseResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public List<CommerceCaseResponse> getCommerceCases(String merchantId, Integer offset, Integer size, OffsetDateTime fromDate, OffsetDateTime toDate, UUID commerceCaseId, String merchantReference, String merchantCustomerId, List<StatusCheckout> includeCheckoutStatus, List<PaymentChannel> includePaymentChannel, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling getCommerceCases");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
    localVarQueryParams.addAll(apiClient.parameterToPair("fromDate", fromDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("toDate", toDate));
    localVarQueryParams.addAll(apiClient.parameterToPair("commerceCaseId", commerceCaseId));
    localVarQueryParams.addAll(apiClient.parameterToPair("merchantReference", merchantReference));
    localVarQueryParams.addAll(apiClient.parameterToPair("merchantCustomerId", merchantCustomerId));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "includeCheckoutStatus", includeCheckoutStatus));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "includePaymentChannel", includePaymentChannel));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<List<CommerceCaseResponse>> localVarReturnType = new TypeReference<List<CommerceCaseResponse>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Modify an existing Commerce Case.
   * This endpoint can be used to update or modify the customer object of a Commerce Case.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param customer  (required)
   * @throws ApiException if fails to make API call
   */
  public void updateCommerceCase(String merchantId, UUID commerceCaseId, Customer customer) throws ApiException {
    this.updateCommerceCase(merchantId, commerceCaseId, customer, Collections.emptyMap());
  }


  /**
   * Modify an existing Commerce Case.
   * This endpoint can be used to update or modify the customer object of a Commerce Case.
   * @param merchantId The merchantId identifies uniquely the merchant. A Checkout has exactly one merchant. (required)
   * @param commerceCaseId Unique identifier of a Commerce Case. (required)
   * @param customer  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateCommerceCase(String merchantId, UUID commerceCaseId, Customer customer, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = customer;
    
    // verify the required parameter 'merchantId' is set
    if (merchantId == null) {
      throw new ApiException(400, "Missing the required parameter 'merchantId' when calling updateCommerceCase");
    }
    
    // verify the required parameter 'commerceCaseId' is set
    if (commerceCaseId == null) {
      throw new ApiException(400, "Missing the required parameter 'commerceCaseId' when calling updateCommerceCase");
    }
    
    // verify the required parameter 'customer' is set
    if (customer == null) {
      throw new ApiException(400, "Missing the required parameter 'customer' when calling updateCommerceCase");
    }
    
    // create path and map variables
    String localVarPath = "/v1/{merchantId}/commerce-cases/{commerceCaseId}"
      .replaceAll("\\{" + "merchantId" + "\\}", apiClient.escapeString(merchantId.toString()))
      .replaceAll("\\{" + "commerceCaseId" + "\\}", apiClient.escapeString(commerceCaseId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

}
